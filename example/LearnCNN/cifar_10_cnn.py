# coding=utf-8
"""
Train a simple deep CNN on the CIFAR10 small images dataset.
"""
from __future__ import print_function
import keras
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Dense, Dropout, Flatten, Input
from keras.models import Model
from keras.preprocessing.image import ImageDataGenerator
from utils.datasets import load_cifar10

input_shape = (32, 32, 3)
batch_size = 32
num_classes = 10
epochs = 200
data_augmentation = True


def load_data():
	# The data, shuffled and split between train and test sets:
	(x_train, y_train), (x_test, y_test) = load_cifar10()
	print('x_train shape:', x_train.shape)  # (n, 32, 32, 3)
	print(x_train.shape[0], 'train samples')
	print(x_test.shape[0], 'test samples')

	x_train = x_train.astype('float32')
	x_test = x_test.astype('float32')
	x_train /= 255
	x_test /= 255

	# Convert class vectors to binary class matrices.
	y_train = keras.utils.to_categorical(y_train, num_classes)
	y_test = keras.utils.to_categorical(y_test, num_classes)

	return (x_train, y_train), (x_test, y_test)


def cnn():
	input_data = Input(input_shape)
	x = Conv2D(32, (3, 3), padding='same', activation='relu')(input_data)
	x = Conv2D(32, (3, 3), activation='relu')(x)
	x = MaxPooling2D((2, 2))(x)
	x = Dropout(0.25)(x)

	x = Conv2D(64, (3, 3), padding='same', activation='relu')(x)
	x = Conv2D(64, (3, 3), activation='relu')(x)
	x = MaxPooling2D((2, 2))(x)
	x = Dropout(0.25)(x)

	x = Flatten()(x)
	x = Dense(512, activation='relu')(x)
	x = Dropout(0.5)(x)
	x = Dense(num_classes, activation='softmax')(x)

	model = Model(input_data, x)
	return model


def main():
	(x_train, y_train), (x_test, y_test) = load_data()
	model = cnn()
	'''
	SGD优化器的参数：
	lr: 学习率
	decay: 每次更新后的学习率衰减值
	momentum: 动量参数
	nesterov: 是否使用Nesterov动量
	'''
	# initiate sgd optimizer
	sgd = keras.optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
	# # initiate RMSprop optimizer
	# opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
	# Let's train the model using sgd
	model.compile(sgd, 'categorical_crossentropy', metrics=['accuracy'])
	if not data_augmentation:
		print('Not using data augmentation.')
		model.fit(x_train, y_train,
		          batch_size=batch_size,
		          epochs=epochs,
		          validation_data=(x_test, y_test))
	else:
		print('Using real-time data augmentation.')
		# This will do preprocessing and realtime data augmentation:
		datagen = ImageDataGenerator(
			featurewise_center=False,  # set input mean to 0 over the dataset
			samplewise_center=False,  # set each sample mean to 0
			featurewise_std_normalization=False,  # divide inputs by std of the dataset
			samplewise_std_normalization=False,  # divide each input by its std
			zca_whitening=False,  # apply ZCA whitening
			rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
			width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
			height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
			horizontal_flip=True,  # randomly flip images
			vertical_flip=False)  # randomly flip images

		# Compute quantities required for feature-wise normalization
		# (std, mean, and principal components if ZCA whitening is applied).
		datagen.fit(x_train)

		# Fit the model on the batches generated by datagen.flow().
		model.fit_generator(datagen.flow(x_train, y_train,
		                                 batch_size=batch_size),
		                    steps_per_epoch=x_train.shape[0] // batch_size,
		                    epochs=epochs,
		                    validation_data=(x_test, y_test))


if __name__ == '__main__':
	main()
